/* START OF FILE JS/bangxephang.js */

document.addEventListener('DOMContentLoaded', () => {
    let modal = null;

    // H√†m t·∫°o modal (ch·ªâ ch·∫°y 1 l·∫ßn)
    function createLeaderboardModal() {
        if (document.getElementById('leaderboard-modal-overlay')) return;

        const modalHTML = `
        <div id="leaderboard-modal-overlay" class="leaderboard-modal-overlay">
            <div class="leaderboard-modal-content">
                <div class="leaderboard-header">
                    üëëB·∫¢NG X·∫æP H·∫†NGüëë
                    <span class="leaderboard-close-button">√ó</span>
                </div>
                <div class="leaderboard-main-area">
                    <div class="leaderboard-tabs">
                        <button class="category-btn active" data-category="trieuphu">N√¥ng d√¢n tri·ªáu ph√∫</button>
                        <button class="category-btn" data-category="cancu">N√¥ng d√¢n c·∫ßn c√π</button>
                        <button class="category-btn" data-category="kinhnghiem">N√¥ng d√¢n kinh nghi·ªám</button>
                        <button class="category-btn" data-category="khaihoang">Vua khai hoang</button>
                        <button class="category-btn" data-category="nangcap">Nh√† n√¢ng c·∫•p vƒ© ƒë·∫°i</button>
                    </div>
                    <div class="leaderboard-display">
                        <h2 id="leaderboard-title">N√¥ng d√¢n tri·ªáu ph√∫</h2>
                        <div id="leaderboard-list-container">
                            <!-- Danh s√°ch ng∆∞·ªùi ch∆°i s·∫Ω ƒë∆∞·ª£c t·∫£i v√† hi·ªÉn th·ªã ·ªü ƒë√¢y -->
                            <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>`;
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        modal = document.getElementById('leaderboard-modal-overlay');
        addEventListenersToLeaderboardModal();
    }
      function renderTopPlayers(topPlayers, dataType) {
        const listContainer = document.getElementById('leaderboard-list-container');
        listContainer.innerHTML = ''; // X√≥a n·ªôi dung c≈© (nh∆∞ "ƒêang t·∫£i...")

        if (!topPlayers || topPlayers.length === 0) {
            listContainer.innerHTML = '<p>Ch∆∞a c√≥ d·ªØ li·ªáu cho b·∫£ng x·∫øp h·∫°ng n√†y.</p>';
            return;
        }

        const ol = document.createElement('ol');
        ol.className = 'leaderboard-list';

        topPlayers.forEach((player, index) => {
            const li = document.createElement('li');
            li.className = 'leaderboard-item';

            // --- Logic m·ªõi cho vi·ªác hi·ªÉn th·ªã RANK (th·ª© h·∫°ng) ---
            let rankHTML = '';
            const rank = index + 1;
            if (rank <= 3) {
                // N·∫øu l√† top 1, 2, 3 -> d√πng h√¨nh ·∫£nh
                rankHTML = `<img src="Pics/top${rank}.png" alt="Top ${rank}" class="rank-icon">`;
            } else {
                // T·ª´ h·∫°ng 4 tr·ªü ƒëi -> d√πng s·ªë
                rankHTML = `<span class="rank">${rank}</span>`;
            }

            // L·∫•y t√™n t·ª´ email, b·ªè ph·∫ßn ƒëu√¥i
            const displayName = player.email ? player.email.split('@')[0] : "Ng∆∞·ªùi ch∆°i ·∫©n danh";
            
            // ƒê·ªãnh d·∫°ng gi√° tr·ªã hi·ªÉn th·ªã (ti·ªÅn, c·∫•p ƒë·ªô,...)
            let displayValue = '';
            if (dataType === 'money') {
                displayValue = `${(player.money || 0).toLocaleString('vi-VN')} $`;
            }
             else if (dataType === 'streak') {
                const streak = (player.weeklyLoginStats && player.weeklyLoginStats.maxStreak) || 0;
                displayValue = `${streak} ng√†y`;
            }
             else if (dataType === 'xp') {
                const xpToday = (player.dailyStats && player.dailyStats.xpEarned) || 0;
                displayValue = `+ ${xpToday.toLocaleString('vi-VN')} KN`;
            }

            li.innerHTML = `
                ${rankHTML}
                <span class="player-info">
                    <span class="player-name">LV ${player.level || 1} - ${displayName}</span>
                </span>
                <span class="player-score ${dataType === 'streak' ? 'streak' : ''}">${displayValue}</span>
            `;
            ol.appendChild(li);
            li.addEventListener('click', () => {
                // G·ªçi h√†m hi·ªÉn th·ªã modal th√¥ng tin t·ª´ file m·ªõi
                if (typeof window.showPlayerInfoModal === 'function') {
                    // Truy·ªÅn to√†n b·ªô d·ªØ li·ªáu c·ªßa ng∆∞·ªùi ch∆°i ƒë∆∞·ª£c click v√†o h√†m
                    window.showPlayerInfoModal(player);
                } else {
                    console.error("L·ªói: H√†m showPlayerInfoModal() kh√¥ng t·ªìn t·∫°i!");
                }
            });
             // Sau khi `li` ƒë√£ ƒë∆∞·ª£c th√™m v√†o DOM, ch√∫ng ta c√≥ th·ªÉ ƒëo k√≠ch th∆∞·ªõc c·ªßa n√≥
            const playerNameSpan = li.querySelector('.player-name');
            const playerInfoContainer = li.querySelector('.player-info');

            // So s√°nh chi·ªÅu r·ªông th·ª±c t·∫ø c·ªßa ch·ªØ v√† chi·ªÅu r·ªông c·ªßa container
            if (playerNameSpan.scrollWidth > playerInfoContainer.clientWidth) {
                playerNameSpan.classList.add('marquee');
            }
        });


        listContainer.appendChild(ol);
    }

     async function fetchTopRichestPlayers() {
        const listContainer = document.getElementById('leaderboard-list-container');
        listContainer.innerHTML = '<p>ƒêang t·∫£i d·ªØ li·ªáu...</p>';

        try {
            const querySnapshot = await db.collection('users')
                .orderBy('money', 'desc') // S·∫Øp x·∫øp theo ti·ªÅn, gi·∫£m d·∫ßn
                .limit(10) // Gi·ªõi h·∫°n 10 k·∫øt qu·∫£
                .get();
            
              const players = querySnapshot.docs
                .filter(doc => doc.data() && doc.data().email) // Ch·ªâ gi·ªØ l·∫°i nh·ªØng document c√≥ field 'email'
                .map(doc => ({ uid: doc.id, ...doc.data() }));
            renderTopPlayers(players, 'money');

        } catch (error) {
            console.error("L·ªói khi t·∫£i BXH N√¥ng d√¢n tri·ªáu ph√∫:", error);
            listContainer.innerHTML = '<p>Kh√¥ng th·ªÉ t·∫£i b·∫£ng x·∫øp h·∫°ng. Vui l√≤ng th·ª≠ l·∫°i sau.</p>';
        }
    }

      async function fetchTopDiligentPlayers() {
        const listContainer = document.getElementById('leaderboard-list-container');
        listContainer.innerHTML = '<p>ƒêang t·∫£i d·ªØ li·ªáu...</p>';
        
        // L·∫•y chu·ªói tu·∫ßn hi·ªán t·∫°i ƒë·ªÉ truy v·∫•n
        const now = new Date();
        const date = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));
        date.setUTCDate(date.getUTCDate() + 4 - (date.getUTCDay() || 7));
        const yearStart = new Date(Date.UTC(date.getUTCFullYear(), 0, 1));
        const weekNo = Math.ceil((((date - yearStart) / 86400000) + 1) / 7);
        const currentWeekString = `${date.getUTCFullYear()}-${String(weekNo).padStart(2, '0')}`;

        try {
            const querySnapshot = await db.collection('users')
                .where('weeklyLoginStats.lastUpdatedWeek', '==', currentWeekString) // Ch·ªâ l·∫•y ng∆∞·ªùi ch∆°i trong tu·∫ßn n√†y
                .orderBy('weeklyLoginStats.maxStreak', 'desc') // S·∫Øp x·∫øp theo chu·ªói d√†i nh·∫•t
                .limit(10)
                .get();
            
            const players = querySnapshot.docs.map(doc => ({ uid: doc.id, ...doc.data() }));
            renderTopPlayers(players, 'streak'); // D√πng dataType m·ªõi l√† 'streak'

        } catch (error) {
            console.error("L·ªói khi t·∫£i BXH N√¥ng d√¢n c·∫ßn c√π:", error);
            listContainer.innerHTML = '<p>Kh√¥ng th·ªÉ t·∫£i b·∫£ng x·∫øp h·∫°ng. Vui l√≤ng th·ª≠ l·∫°i sau.</p>';
        }
    }

    /**
     * L·∫•y d·ªØ li·ªáu top 10 ng∆∞·ªùi ch∆°i c√≥ nhi·ªÅu kinh nghi·ªám nh·∫•t trong ng√†y.
     */
    async function fetchTopExperiencedPlayers() {
        const listContainer = document.getElementById('leaderboard-list-container');
        listContainer.innerHTML = '<p>ƒêang t·∫£i d·ªØ li·ªáu...</p>';
        
        // L·∫•y ng√†y h√¥m nay d∆∞·ªõi d·∫°ng chu·ªói "YYYY-MM-DD" ƒë·ªÉ truy v·∫•n
        const today = new Date().toISOString().slice(0, 10);

        try {
            const querySnapshot = await db.collection('users')
                .where('dailyStats.lastUpdate', '==', today) // Ch·ªâ l·∫•y ng∆∞·ªùi ch∆°i c√≥ ho·∫°t ƒë·ªông h√¥m nay
                .orderBy('dailyStats.xpEarned', 'desc')     // S·∫Øp x·∫øp theo XP ki·∫øm ƒë∆∞·ª£c, gi·∫£m d·∫ßn
                .limit(10)                                  // Gi·ªõi h·∫°n 10 ng∆∞·ªùi
                .get();
            
            const players = querySnapshot.docs.map(doc => ({ uid: doc.id, ...doc.data() }));
            renderTopPlayers(players, 'xp'); // D√πng dataType m·ªõi l√† 'xp'

        } catch (error) {
            console.error("L·ªói khi t·∫£i BXH N√¥ng d√¢n kinh nghi·ªám:", error);
            listContainer.innerHTML = '<p>Kh√¥ng th·ªÉ t·∫£i b·∫£ng x·∫øp h·∫°ng. Vui l√≤ng th·ª≠ l·∫°i sau.</p>';
        }
    }


    // G√°n s·ª± ki·ªán cho c√°c n√∫t
    function addEventListenersToLeaderboardModal() {
        const closeBtn = modal.querySelector('.leaderboard-close-button');
        const categoriesContainer = modal.querySelector('.leaderboard-tabs');
        const modalContent = modal.querySelector('.leaderboard-modal-content');
        closeBtn.addEventListener('click', hideLeaderboardModal);
        modal.addEventListener('click', (e) => { if (e.target === modal) hideLeaderboardModal(); });

        categoriesContainer.addEventListener('click', (e) => {
            if (e.target.classList.contains('category-btn')) {
                // X√≥a class 'active' kh·ªèi t·∫•t c·∫£ c√°c n√∫t
                categoriesContainer.querySelectorAll('.category-btn').forEach(btn => btn.classList.remove('active'));
                
                // Th√™m class 'active' cho n√∫t ƒë∆∞·ª£c nh·∫•n
                e.target.classList.add('active');

                // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ
                document.getElementById('leaderboard-title').textContent = e.target.textContent;
                
               
                const category = e.target.dataset.category;
                
                // Logic thay ƒë·ªïi h√¨nh n·ªÅn
                if (category === 'cancu') {
                    modalContent.style.backgroundImage = "url('Pics/nongdancancu.png')";
                } else {
                    // Quay v·ªÅ h√¨nh n·ªÅn m·∫∑c ƒë·ªãnh cho t·∫•t c·∫£ c√°c tab kh√°c
                    modalContent.style.backgroundImage = "url('Pics/nenmodal.png')";
                }

                // Logic t·∫£i d·ªØ li·ªáu
                if (category === 'trieuphu') {
                    fetchTopRichestPlayers();
                } else if (category === 'cancu') {
                    fetchTopDiligentPlayers();
                } 
                  else if (category === 'kinhnghiem') {
                    fetchTopExperiencedPlayers();
                } 
                
                
                else {
                    // T·∫°m th·ªùi cho c√°c tab kh√°c
                    document.getElementById('leaderboard-list-container').innerHTML = `<p>B·∫£ng x·∫øp h·∫°ng "${e.target.textContent}" ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.</p>`;
                }
              
            }
        });
    }

    // H√†m hi·ªÉn th·ªã modal
    window.showLeaderboardModal = function() {
        createLeaderboardModal();
        // M·∫∑c ƒë·ªãnh t·∫£i BXH tri·ªáu ph√∫ khi m·ªü modal
        fetchTopRichestPlayers(); 
        modal.classList.add('visible');
    };

    // H√†m ·∫©n modal
    function hideLeaderboardModal() {
        if (modal) modal.classList.remove('visible');
    }
});
/* END OF FILE JS/bangxephang.js */